//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Elmish Land (v1.0.0-alpha.78).
// Here are the available commands:
// 
// dotnet elmish-land init ...... create a new project in the current directory
// dotnet elmish-land upgrade ....... upgrade project to the latest elmish-land
// dotnet elmish-land server ........................... run a local dev server
// dotnet elmish-land build ..................... build your app for production
// dotnet elmish-land add page <url> ........................... add a new page
// dotnet elmish-land add layout <name> ...................... add a new layout
// dotnet elmish-land routes ...................... list all routes in your app
// 
// Want to learn more? Visit https://elmish.land
// 
// This file will be overwritten when re-executing
// 'dotnet elmish-land server' or 'dotnet elmish-land build'.
// </auto-generated>
//------------------------------------------------------------------------------
module GittyGUI.App

open Elmish
open Elmish.React
open Elmish.HMR
open Feliz
open Feliz.Router
open GittyGUI.Routes
open GittyGUI.Pages

[<RequireQualifiedAccess>]
type Page =
    | Home of GittyGUI.Pages.Home.Page.Model
    | NotFound

type Model = {
    Shared: Shared.Model
    CurrentRoute: Route
    CurrentPage: Page
}

type Msg =
| SharedMsg of Shared.Msg
| RouteChanged of Route
| HomeMsg of GittyGUI.Pages.Home.Page.Msg

let init () =
    let initialUrl = Route.parse (Router.currentUrl ())
    let sharedModel, sharedCmd = Shared.init ()

    let defaultModel = {
        Shared = sharedModel
        CurrentRoute = initialUrl
        CurrentPage = Page.NotFound
    }

    let initPage init initArgs page msg =
        let nextModel, nextCmd = init initArgs
        let nextPage = page nextModel

        {
            defaultModel with
                CurrentPage = nextPage
        },
        Cmd.batch [ sharedCmd; Cmd.map msg nextCmd ]

    match initialUrl with
    | Route.Home ->
        initPage GittyGUI.Pages.Home.Page.init () Page.Home HomeMsg
    | Route.NotFound ->
        {
            defaultModel with
                CurrentPage = Page.NotFound
        },
        Cmd.none

let update (msg: Msg) (model: Model) =
    let updatePage update msg' model' page msg =
        let model'', cmd = update msg' model'

        {
            model with
                CurrentPage = page model''
        },
        Cmd.map msg cmd
    match msg, model.CurrentPage with
    | SharedMsg msg', _ ->
        let model'', cmd = Shared.update msg' model.Shared
        { model with Shared = model'' }, Cmd.map SharedMsg cmd
    | RouteChanged nextRoute, _ ->
        let changeRoute init initArgs page msg =
            let model', msg' = init initArgs
            {
                model with
                    CurrentPage = page model'
                    CurrentRoute = nextRoute
            },
            Cmd.map msg msg'
        match nextRoute with
        | Route.Home  ->
            changeRoute GittyGUI.Pages.Home.Page.init () Page.Home HomeMsg
        | Route.NotFound ->
            {
                model with
                    CurrentPage = Page.NotFound
                    CurrentRoute = Route.NotFound
            },
            Cmd.none
    | HomeMsg msg', Page.Home model' ->
        updatePage GittyGUI.Pages.Home.Page.update msg' model' Page.Home HomeMsg
    | msg', model' ->
        printfn $"Unhandled App.Msg and CurrentPage.Model. Got\nMsg:\n%A{msg'}\nCurrentPage.Model:\n%A{model'}"
        model, Cmd.none

let view (model: Model) (dispatch: Msg -> unit) =
    let currentPageView =
        match model.CurrentPage with
        | Page.Home m -> GittyGUI.Pages.Home.Page.view m (HomeMsg >> dispatch)
        | Page.NotFound -> Html.h1 "Page not found"

    React.router [
        router.onUrlChanged (Route.parse >> RouteChanged >> dispatch)
        router.children [ currentPageView ]
    ]

let subscribe model =
    Sub.batch [
        Sub.map "Shared_App" SharedMsg [ Shared.subscribeShared id ]
        match model.CurrentPage with
        | Page.Home m -> Sub.map "Home" HomeMsg (GittyGUI.Pages.Home.Page.subscribe m)
        | Page.NotFound -> Sub.none
    ]

Program.mkProgram init update view
|> Program.withErrorHandler (fun (msg, ex) -> printfn "Program error handler:\r\n%s\r\n%O" msg ex)
|> Program.withReactBatched "app"
|> Program.withSubscription subscribe
|> Program.run
